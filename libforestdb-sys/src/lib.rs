#![allow(non_camel_case_types)]
extern crate libc;

/* automatically generated by rust-bindgen */

pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_longlong;
pub type uint8_t = ::libc::c_uchar;
pub type uint16_t = ::libc::c_ushort;
pub type uint32_t = ::libc::c_uint;
pub type uint64_t = ::libc::c_ulonglong;
pub type int_least8_t = int8_t;
pub type int_least16_t = int16_t;
pub type int_least32_t = int32_t;
pub type int_least64_t = int64_t;
pub type uint_least8_t = uint8_t;
pub type uint_least16_t = uint16_t;
pub type uint_least32_t = uint32_t;
pub type uint_least64_t = uint64_t;
pub type int_fast8_t = int8_t;
pub type int_fast16_t = int16_t;
pub type int_fast32_t = int32_t;
pub type int_fast64_t = int64_t;
pub type uint_fast8_t = uint8_t;
pub type uint_fast16_t = uint16_t;
pub type uint_fast32_t = uint32_t;
pub type uint_fast64_t = uint64_t;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_longlong;
pub type __uint64_t = ::libc::c_ulonglong;
pub type uintptr_t = ::libc::c_ulong;
pub type intmax_t = ::libc::c_long;
pub type uintmax_t = ::libc::c_ulong;
pub type ptrdiff_t = ::libc::c_long;
pub type size_t = ::libc::c_ulong;
pub type rsize_t = ::libc::c_ulong;
pub type wchar_t = ::libc::c_int;
pub type Enum_Unnamed2 = ::libc::c_int;
pub const FDB_RESULT_SUCCESS: ::libc::c_int = 0;
pub const FDB_RESULT_INVALID_ARGS: ::libc::c_int = -1;
pub const FDB_RESULT_OPEN_FAIL: ::libc::c_int = -2;
pub const FDB_RESULT_NO_SUCH_FILE: ::libc::c_int = -3;
pub const FDB_RESULT_WRITE_FAIL: ::libc::c_int = -4;
pub const FDB_RESULT_READ_FAIL: ::libc::c_int = -5;
pub const FDB_RESULT_CLOSE_FAIL: ::libc::c_int = -6;
pub const FDB_RESULT_COMMIT_FAIL: ::libc::c_int = -7;
pub const FDB_RESULT_ALLOC_FAIL: ::libc::c_int = -8;
pub const FDB_RESULT_KEY_NOT_FOUND: ::libc::c_int = -9;
pub const FDB_RESULT_RONLY_VIOLATION: ::libc::c_int = -10;
pub const FDB_RESULT_COMPACTION_FAIL: ::libc::c_int = -11;
pub const FDB_RESULT_ITERATOR_FAIL: ::libc::c_int = -12;
pub const FDB_RESULT_SEEK_FAIL: ::libc::c_int = -13;
pub const FDB_RESULT_FSYNC_FAIL: ::libc::c_int = -14;
pub const FDB_RESULT_CHECKSUM_ERROR: ::libc::c_int = -15;
pub const FDB_RESULT_FILE_CORRUPTION: ::libc::c_int = -16;
pub const FDB_RESULT_COMPRESSION_FAIL: ::libc::c_int = -17;
pub const FDB_RESULT_NO_DB_INSTANCE: ::libc::c_int = -18;
pub const FDB_RESULT_FAIL_BY_ROLLBACK: ::libc::c_int = -19;
pub const FDB_RESULT_INVALID_CONFIG: ::libc::c_int = -20;
pub const FDB_RESULT_MANUAL_COMPACTION_FAIL: ::libc::c_int = -21;
pub const FDB_RESULT_INVALID_COMPACTION_MODE: ::libc::c_int = -22;
pub const FDB_RESULT_FILE_IS_BUSY: ::libc::c_int = -23;
pub const FDB_RESULT_FILE_REMOVE_FAIL: ::libc::c_int = -24;
pub const FDB_RESULT_FILE_RENAME_FAIL: ::libc::c_int = -25;
pub const FDB_RESULT_TRANSACTION_FAIL: ::libc::c_int = -26;
pub const FDB_RESULT_FAIL_BY_TRANSACTION: ::libc::c_int = -27;
pub const FDB_RESULT_FAIL_BY_COMPACTION: ::libc::c_int = -28;
pub const FDB_RESULT_TOO_LONG_FILENAME: ::libc::c_int = -29;
pub const FDB_RESULT_INVALID_HANDLE: ::libc::c_int = -30;
pub const FDB_RESULT_KV_STORE_NOT_FOUND: ::libc::c_int = -31;
pub const FDB_RESULT_KV_STORE_BUSY: ::libc::c_int = -32;
pub const FDB_RESULT_INVALID_KV_INSTANCE_NAME: ::libc::c_int = -33;
pub const FDB_RESULT_INVALID_CMP_FUNCTION: ::libc::c_int = -34;
pub const FDB_RESULT_IN_USE_BY_COMPACTOR: ::libc::c_int = -35;
pub const FDB_RESULT_FILE_NOT_OPEN: ::libc::c_int = -36;
pub const FDB_RESULT_TOO_BIG_BUFFER_CACHE: ::libc::c_int = -37;
pub const FDB_RESULT_NO_DB_HEADERS: ::libc::c_int = -38;
pub const FDB_RESULT_HANDLE_BUSY: ::libc::c_int = -39;
pub const FDB_RESULT_AIO_NOT_SUPPORTED: ::libc::c_int = -40;
pub const FDB_RESULT_AIO_INIT_FAIL: ::libc::c_int = -41;
pub const FDB_RESULT_AIO_SUBMIT_FAIL: ::libc::c_int = -42;
pub const FDB_RESULT_AIO_GETEVENTS_FAIL: ::libc::c_int = -43;
pub type fdb_status = Enum_Unnamed2;
pub type fdb_open_flags = uint32_t;
pub type Enum_Unnamed3 = ::libc::c_uint;
pub const FDB_OPEN_FLAG_CREATE: ::libc::c_uint = 1;
pub const FDB_OPEN_FLAG_RDONLY: ::libc::c_uint = 2;
pub type fdb_commit_opt_t = uint8_t;
pub type Enum_Unnamed4 = ::libc::c_uint;
pub const FDB_COMMIT_NORMAL: ::libc::c_uint = 0;
pub const FDB_COMMIT_MANUAL_WAL_FLUSH: ::libc::c_uint = 1;
pub type fdb_seqtree_opt_t = uint8_t;
pub type Enum_Unnamed5 = ::libc::c_uint;
pub const FDB_SEQTREE_NOT_USE: ::libc::c_uint = 0;
pub const FDB_SEQTREE_USE: ::libc::c_uint = 1;
pub type fdb_durability_opt_t = uint8_t;
pub type Enum_Unnamed6 = ::libc::c_uint;
pub const FDB_DRB_NONE: fdb_durability_opt_t = 0;
pub const FDB_DRB_ODIRECT: fdb_durability_opt_t = 1;
pub const FDB_DRB_ASYNC: fdb_durability_opt_t = 2;
pub const FDB_DRB_ODIRECT_ASYNC: fdb_durability_opt_t = 3;
pub type fdb_compaction_mode_t = uint8_t;
pub type Enum_Unnamed7 = ::libc::c_uint;
pub const FDB_COMPACTION_MANUAL: fdb_compaction_mode_t = 0;
pub const FDB_COMPACTION_AUTO: fdb_compaction_mode_t = 1;
pub type fdb_isolation_level_t = uint8_t;
pub type Enum_Unnamed8 = ::libc::c_uint;
pub const FDB_ISOLATION_READ_COMMITTED: fdb_isolation_level_t = 2;
pub const FDB_ISOLATION_READ_UNCOMMITTED: fdb_isolation_level_t = 3;
pub type fdb_custom_cmp_fixed =
    ::std::option::Option<extern "C" fn(a: *mut ::libc::c_void,
                                        b: *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type fdb_custom_cmp_variable =
    ::std::option::Option<extern "C" fn(a: *mut ::libc::c_void, len_a: size_t,
                                        b: *mut ::libc::c_void, len_b: size_t)
                              -> ::libc::c_int>;
pub type fdb_seqnum_t = uint64_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_fdb_doc_struct {
    pub keylen: size_t,
    pub metalen: size_t,
    pub bodylen: size_t,
    pub size_ondisk: size_t,
    pub key: *mut ::libc::c_void,
    pub seqnum: fdb_seqnum_t,
    pub offset: uint64_t,
    pub meta: *mut ::libc::c_void,
    pub body: *mut ::libc::c_void,
    pub deleted: u8,
}
impl ::std::clone::Clone for Struct_fdb_doc_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_fdb_doc_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fdb_doc = Struct_fdb_doc_struct;
pub enum Struct__fdb_file_handle { }
pub type fdb_file_handle = Struct__fdb_file_handle;
pub enum Struct__fdb_kvs_handle { }
pub type fdb_kvs_handle = Struct__fdb_kvs_handle;
pub type fdb_compaction_status = uint32_t;
pub type Enum_Unnamed9 = ::libc::c_uint;
pub const FDB_CS_BEGIN: ::libc::c_uint = 1;
pub const FDB_CS_MOVE_DOC: ::libc::c_uint = 2;
pub const FDB_CS_BATCH_MOVE: ::libc::c_uint = 4;
pub const FDB_CS_FLUSH_WAL: ::libc::c_uint = 8;
pub const FDB_CS_END: ::libc::c_uint = 16;
pub type fdb_compaction_callback =
    ::std::option::Option<extern "C" fn(fhandle: *mut fdb_file_handle,
                                        status: fdb_compaction_status,
                                        doc: *mut fdb_doc,
                                        last_oldfile_offset: uint64_t,
                                        last_newfile_offset: uint64_t,
                                        ctx: *mut ::libc::c_void)
                              -> ::libc::c_int>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed10 {
    pub chunksize: uint16_t,
    pub blocksize: uint32_t,
    pub buffercache_size: uint64_t,
    pub wal_threshold: uint64_t,
    pub wal_flush_before_commit: u8,
    pub auto_commit: u8,
    pub purging_interval: uint32_t,
    pub seqtree_opt: fdb_seqtree_opt_t,
    pub durability_opt: fdb_durability_opt_t,
    pub flags: fdb_open_flags,
    pub compaction_buf_maxsize: uint32_t,
    pub cleanup_cache_onclose: u8,
    pub compress_document_body: u8,
    pub compaction_mode: fdb_compaction_mode_t,
    pub compaction_threshold: uint8_t,
    pub compaction_minimum_filesize: uint64_t,
    pub compactor_sleep_duration: uint64_t,
    pub multi_kv_instances: u8,
    pub prefetch_duration: uint64_t,
    pub num_wal_partitions: uint16_t,
    pub num_bcache_partitions: uint16_t,
    pub compaction_cb: fdb_compaction_callback,
    pub compaction_cb_mask: uint32_t,
    pub compaction_cb_ctx: *mut ::libc::c_void,
    pub max_writer_lock_prob: size_t,
    pub num_compactor_threads: size_t,
}
impl ::std::clone::Clone for Struct_Unnamed10 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed10 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fdb_config = Struct_Unnamed10;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed11 {
    pub create_if_missing: u8,
    pub custom_cmp: fdb_custom_cmp_variable,
}
impl ::std::clone::Clone for Struct_Unnamed11 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed11 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fdb_kvs_config = Struct_Unnamed11;
pub type fdb_log_callback =
    ::std::option::Option<extern "C" fn(err_code: ::libc::c_int,
                                        err_msg: *const ::libc::c_char,
                                        ctx_data: *mut ::libc::c_void) -> ()>;
pub type fdb_iterator_opt_t = uint16_t;
pub type Enum_Unnamed12 = ::libc::c_uint;
pub const FDB_ITR_NONE: fdb_iterator_opt_t = 0;
pub const FDB_ITR_NO_DELETES: fdb_iterator_opt_t = 2;
pub const FDB_ITR_SKIP_MIN_KEY: fdb_iterator_opt_t = 4;
pub const FDB_ITR_SKIP_MAX_KEY: fdb_iterator_opt_t = 8;
pub type fdb_iterator_seek_opt_t = uint8_t;
pub type Enum_Unnamed13 = ::libc::c_uint;
pub const FDB_ITR_SEEK_HIGHER: fdb_iterator_seek_opt_t = 0;
pub const FDB_ITR_SEEK_LOWER: fdb_iterator_seek_opt_t = 1;
pub enum Struct__fdb_iterator { }
pub type fdb_iterator = Struct__fdb_iterator;
pub type cs_off_t = int64_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed14 {
    pub filename: *const ::libc::c_char,
    pub new_filename: *const ::libc::c_char,
    pub doc_count: uint64_t,
    pub space_used: uint64_t,
    pub file_size: uint64_t,
}
impl ::std::clone::Clone for Struct_Unnamed14 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed14 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fdb_file_info = Struct_Unnamed14;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed15 {
    pub name: *const ::libc::c_char,
    pub last_seqnum: fdb_seqnum_t,
    pub doc_count: uint64_t,
    pub space_used: uint64_t,
    pub file: *mut fdb_file_handle,
}
impl ::std::clone::Clone for Struct_Unnamed15 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed15 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fdb_kvs_info = Struct_Unnamed15;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed16 {
    pub num_sets: uint64_t,
    pub num_dels: uint64_t,
    pub num_commits: uint64_t,
    pub num_compacts: uint64_t,
    pub num_gets: uint64_t,
    pub num_iterator_gets: uint64_t,
    pub num_iterator_moves: uint64_t,
}
impl ::std::clone::Clone for Struct_Unnamed16 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed16 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fdb_kvs_ops_info = Struct_Unnamed16;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed17 {
    pub num_kvs_names: size_t,
    pub kvs_names: *mut *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_Unnamed17 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed17 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fdb_kvs_name_list = Struct_Unnamed17;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed18 {
    pub kv_store_name: *mut ::libc::c_char,
    pub seqnum: fdb_seqnum_t,
}
impl ::std::clone::Clone for Struct_Unnamed18 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed18 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fdb_kvs_commit_marker_t = Struct_Unnamed18;
pub type fdb_snapshot_marker_t = uint64_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed19 {
    pub marker: fdb_snapshot_marker_t,
    pub num_kvs_markers: int64_t,
    pub kvs_markers: *mut fdb_kvs_commit_marker_t,
}
impl ::std::clone::Clone for Struct_Unnamed19 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed19 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fdb_snapshot_info_t = Struct_Unnamed19;
extern "C" {
    pub fn fdb_init(config: *mut fdb_config) -> fdb_status;
    pub fn fdb_get_default_config() -> fdb_config;
    pub fn fdb_get_default_kvs_config() -> fdb_kvs_config;
    pub fn fdb_open(ptr_fhandle: *mut *mut fdb_file_handle,
                    filename: *const ::libc::c_char, fconfig: *mut fdb_config)
     -> fdb_status;
    pub fn fdb_open_custom_cmp(ptr_fhandle: *mut *mut fdb_file_handle,
                               filename: *const ::libc::c_char,
                               fconfig: *mut fdb_config,
                               num_functions: size_t,
                               kvs_names: *mut *mut ::libc::c_char,
                               functions: *mut fdb_custom_cmp_variable)
     -> fdb_status;
    pub fn fdb_set_log_callback(handle: *mut fdb_kvs_handle,
                                log_callback: fdb_log_callback,
                                ctx_data: *mut ::libc::c_void) -> fdb_status;
    pub fn fdb_doc_create(doc: *mut *mut fdb_doc, key: *const ::libc::c_void,
                          keylen: size_t, meta: *const ::libc::c_void,
                          metalen: size_t, body: *const ::libc::c_void,
                          bodylen: size_t) -> fdb_status;
    pub fn fdb_doc_update(doc: *mut *mut fdb_doc, meta: *const ::libc::c_void,
                          metalen: size_t, body: *const ::libc::c_void,
                          bodylen: size_t) -> fdb_status;
    pub fn fdb_doc_free(doc: *mut fdb_doc) -> fdb_status;
    pub fn fdb_get(handle: *mut fdb_kvs_handle, doc: *mut fdb_doc)
     -> fdb_status;
    pub fn fdb_get_metaonly(handle: *mut fdb_kvs_handle, doc: *mut fdb_doc)
     -> fdb_status;
    pub fn fdb_get_byseq(handle: *mut fdb_kvs_handle, doc: *mut fdb_doc)
     -> fdb_status;
    pub fn fdb_get_metaonly_byseq(handle: *mut fdb_kvs_handle,
                                  doc: *mut fdb_doc) -> fdb_status;
    pub fn fdb_get_byoffset(handle: *mut fdb_kvs_handle, doc: *mut fdb_doc)
     -> fdb_status;
    pub fn fdb_set(handle: *mut fdb_kvs_handle, doc: *mut fdb_doc)
     -> fdb_status;
    pub fn fdb_del(handle: *mut fdb_kvs_handle, doc: *mut fdb_doc)
     -> fdb_status;
    pub fn fdb_get_kv(handle: *mut fdb_kvs_handle, key: *const ::libc::c_void,
                      keylen: size_t, value_out: *mut *mut ::libc::c_void,
                      valuelen_out: *mut size_t) -> fdb_status;
    pub fn fdb_set_kv(handle: *mut fdb_kvs_handle, key: *const ::libc::c_void,
                      keylen: size_t, value: *const ::libc::c_void,
                      valuelen: size_t) -> fdb_status;
    pub fn fdb_del_kv(handle: *mut fdb_kvs_handle, key: *const ::libc::c_void,
                      keylen: size_t) -> fdb_status;
    pub fn fdb_free_block(ptr: *mut ::libc::c_void) -> fdb_status;
    pub fn fdb_commit(fhandle: *mut fdb_file_handle, opt: fdb_commit_opt_t)
     -> fdb_status;
    pub fn fdb_snapshot_open(handle_in: *mut fdb_kvs_handle,
                             handle_out: *mut *mut fdb_kvs_handle,
                             snapshot_seqnum: fdb_seqnum_t) -> fdb_status;
    pub fn fdb_rollback(handle_ptr: *mut *mut fdb_kvs_handle,
                        rollback_seqnum: fdb_seqnum_t) -> fdb_status;
    pub fn fdb_rollback_all(fhandle: *mut fdb_file_handle,
                            marker: fdb_snapshot_marker_t) -> fdb_status;
    pub fn fdb_iterator_init(handle: *mut fdb_kvs_handle,
                             iterator: *mut *mut fdb_iterator,
                             min_key: *const ::libc::c_void,
                             min_keylen: size_t,
                             max_key: *const ::libc::c_void,
                             max_keylen: size_t, opt: fdb_iterator_opt_t)
     -> fdb_status;
    pub fn fdb_iterator_sequence_init(handle: *mut fdb_kvs_handle,
                                      iterator: *mut *mut fdb_iterator,
                                      min_seq: fdb_seqnum_t,
                                      max_seq: fdb_seqnum_t,
                                      opt: fdb_iterator_opt_t) -> fdb_status;
    pub fn fdb_iterator_prev(iterator: *mut fdb_iterator) -> fdb_status;
    pub fn fdb_iterator_next(iterator: *mut fdb_iterator) -> fdb_status;
    pub fn fdb_iterator_get(iterator: *mut fdb_iterator,
                            doc: *mut *mut fdb_doc) -> fdb_status;
    pub fn fdb_iterator_get_metaonly(iterator: *mut fdb_iterator,
                                     doc: *mut *mut fdb_doc) -> fdb_status;
    pub fn fdb_iterator_seek(iterator: *mut fdb_iterator,
                             seek_key: *const ::libc::c_void,
                             seek_keylen: size_t,
                             direction: fdb_iterator_seek_opt_t)
     -> fdb_status;
    pub fn fdb_iterator_seek_to_min(iterator: *mut fdb_iterator)
     -> fdb_status;
    pub fn fdb_iterator_seek_to_max(iterator: *mut fdb_iterator)
     -> fdb_status;
    pub fn fdb_iterator_close(iterator: *mut fdb_iterator) -> fdb_status;
    pub fn fdb_compact(fhandle: *mut fdb_file_handle,
                       new_filename: *const ::libc::c_char) -> fdb_status;
    pub fn fdb_compact_with_cow(fhandle: *mut fdb_file_handle,
                                new_filename: *const ::libc::c_char)
     -> fdb_status;
    pub fn fdb_compact_upto(fhandle: *mut fdb_file_handle,
                            new_filename: *const ::libc::c_char,
                            marker: fdb_snapshot_marker_t) -> fdb_status;
    pub fn fdb_compact_upto_with_cow(fhandle: *mut fdb_file_handle,
                                     new_filename: *const ::libc::c_char,
                                     marker: fdb_snapshot_marker_t)
     -> fdb_status;
    pub fn fdb_get_buffer_cache_used() -> size_t;
    pub fn fdb_estimate_space_used(fhandle: *mut fdb_file_handle) -> size_t;
    pub fn fdb_get_file_info(fhandle: *mut fdb_file_handle,
                             info: *mut fdb_file_info) -> fdb_status;
    pub fn fdb_get_kvs_info(handle: *mut fdb_kvs_handle,
                            info: *mut fdb_kvs_info) -> fdb_status;
    pub fn fdb_get_kvs_ops_info(handle: *mut fdb_kvs_handle,
                                info: *mut fdb_kvs_ops_info) -> fdb_status;
    pub fn fdb_get_kvs_seqnum(handle: *mut fdb_kvs_handle,
                              seqnum: *mut fdb_seqnum_t) -> fdb_status;
    pub fn fdb_get_kvs_name_list(fhandle: *mut fdb_file_handle,
                                 kvs_name_list: *mut fdb_kvs_name_list)
     -> fdb_status;
    pub fn fdb_get_all_snap_markers(fhandle: *mut fdb_file_handle,
                                    markers: *mut *mut fdb_snapshot_info_t,
                                    size: *mut uint64_t) -> fdb_status;
    pub fn fdb_free_snap_markers(markers: *mut fdb_snapshot_info_t,
                                 size: uint64_t) -> fdb_status;
    pub fn fdb_free_kvs_name_list(kvs_name_list: *mut fdb_kvs_name_list)
     -> fdb_status;
    pub fn fdb_switch_compaction_mode(fhandle: *mut fdb_file_handle,
                                      mode: fdb_compaction_mode_t,
                                      new_threshold: size_t) -> fdb_status;
    pub fn fdb_close(fhandle: *mut fdb_file_handle) -> fdb_status;
    pub fn fdb_destroy(filename: *const ::libc::c_char,
                       fconfig: *mut fdb_config) -> fdb_status;
    pub fn fdb_shutdown() -> fdb_status;
    pub fn fdb_begin_transaction(fhandle: *mut fdb_file_handle,
                                 isolation_level: fdb_isolation_level_t)
     -> fdb_status;
    pub fn fdb_end_transaction(fhandle: *mut fdb_file_handle,
                               opt: fdb_commit_opt_t) -> fdb_status;
    pub fn fdb_abort_transaction(fhandle: *mut fdb_file_handle) -> fdb_status;
    pub fn fdb_kvs_open(fhandle: *mut fdb_file_handle,
                        ptr_handle: *mut *mut fdb_kvs_handle,
                        kvs_name: *const ::libc::c_char,
                        config: *mut fdb_kvs_config) -> fdb_status;
    pub fn fdb_kvs_open_default(fhandle: *mut fdb_file_handle,
                                ptr_handle: *mut *mut fdb_kvs_handle,
                                config: *mut fdb_kvs_config) -> fdb_status;
    pub fn fdb_kvs_close(handle: *mut fdb_kvs_handle) -> fdb_status;
    pub fn fdb_kvs_remove(fhandle: *mut fdb_file_handle,
                          kvs_name: *const ::libc::c_char) -> fdb_status;
    pub fn fdb_error_msg(err_code: fdb_status) -> *const ::libc::c_char;
}
