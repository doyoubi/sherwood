#![allow(unstable)]
#![allow(non_camel_case_types)]
#![allow(raw_pointer_derive)]

extern crate libc;


/* automatically generated by rust-bindgen */

pub type Enum_Unnamed1 = ::libc::c_int;
pub const FDB_RESULT_SUCCESS: ::libc::c_int = 0;
pub const FDB_RESULT_INVALID_ARGS: ::libc::c_int = -1;
pub const FDB_RESULT_OPEN_FAIL: ::libc::c_int = -2;
pub const FDB_RESULT_NO_SUCH_FILE: ::libc::c_int = -3;
pub const FDB_RESULT_WRITE_FAIL: ::libc::c_int = -4;
pub const FDB_RESULT_READ_FAIL: ::libc::c_int = -5;
pub const FDB_RESULT_CLOSE_FAIL: ::libc::c_int = -6;
pub const FDB_RESULT_COMMIT_FAIL: ::libc::c_int = -7;
pub const FDB_RESULT_ALLOC_FAIL: ::libc::c_int = -8;
pub const FDB_RESULT_KEY_NOT_FOUND: ::libc::c_int = -9;
pub const FDB_RESULT_RONLY_VIOLATION: ::libc::c_int = -10;
pub const FDB_RESULT_COMPACTION_FAIL: ::libc::c_int = -11;
pub const FDB_RESULT_ITERATOR_FAIL: ::libc::c_int = -12;
pub const FDB_RESULT_SEEK_FAIL: ::libc::c_int = -13;
pub const FDB_RESULT_FSYNC_FAIL: ::libc::c_int = -14;
pub const FDB_RESULT_CHECKSUM_ERROR: ::libc::c_int = -15;
pub const FDB_RESULT_FILE_CORRUPTION: ::libc::c_int = -16;
pub const FDB_RESULT_COMPRESSION_FAIL: ::libc::c_int = -17;
pub const FDB_RESULT_NO_DB_INSTANCE: ::libc::c_int = -18;
pub const FDB_RESULT_FAIL_BY_ROLLBACK: ::libc::c_int = -19;
pub const FDB_RESULT_INVALID_CONFIG: ::libc::c_int = -20;
pub const FDB_RESULT_MANUAL_COMPACTION_FAIL: ::libc::c_int = -21;
pub const FDB_RESULT_INVALID_COMPACTION_MODE: ::libc::c_int = -22;
pub const FDB_RESULT_FILE_IS_BUSY: ::libc::c_int = -23;
pub const FDB_RESULT_FILE_REMOVE_FAIL: ::libc::c_int = -24;
pub const FDB_RESULT_FILE_RENAME_FAIL: ::libc::c_int = -25;
pub const FDB_RESULT_TRANSACTION_FAIL: ::libc::c_int = -26;
pub const FDB_RESULT_FAIL_BY_TRANSACTION: ::libc::c_int = -27;
pub const FDB_RESULT_FAIL_BY_COMPACTION: ::libc::c_int = -28;
pub const FDB_RESULT_TOO_LONG_FILENAME: ::libc::c_int = -29;
pub const FDB_RESULT_INVALID_HANDLE: ::libc::c_int = -30;
pub const FDB_RESULT_KV_STORE_NOT_FOUND: ::libc::c_int = -31;
pub const FDB_RESULT_KV_STORE_BUSY: ::libc::c_int = -32;
pub const FDB_RESULT_INVALID_KV_INSTANCE_NAME: ::libc::c_int = -33;
pub const FDB_RESULT_INVALID_CMP_FUNCTION: ::libc::c_int = -34;
pub const FDB_RESULT_IN_USE_BY_COMPACTOR: ::libc::c_int = -35;
pub type fdb_status = Enum_Unnamed1;
pub type fdb_open_flags = u32;
pub type Enum_Unnamed2 = ::libc::c_uint;
pub const FDB_OPEN_FLAG_CREATE: ::libc::c_uint = 1;
pub const FDB_OPEN_FLAG_RDONLY: ::libc::c_uint = 2;
pub type fdb_commit_opt_t = u8;
pub type Enum_Unnamed3 = ::libc::c_uint;
pub const FDB_COMMIT_NORMAL: ::libc::c_uint = 0;
pub const FDB_COMMIT_MANUAL_WAL_FLUSH: ::libc::c_uint = 1;
pub type fdb_seqtree_opt_t = u8;
pub type Enum_Unnamed4 = ::libc::c_uint;
pub const FDB_SEQTREE_NOT_USE: ::libc::c_uint = 0;
pub const FDB_SEQTREE_USE: ::libc::c_uint = 1;
pub type fdb_durability_opt_t = u8;
pub type Enum_Unnamed5 = ::libc::c_uint;
pub const FDB_DRB_NONE: ::libc::c_uint = 0;
pub const FDB_DRB_ODIRECT: ::libc::c_uint = 1;
pub const FDB_DRB_ASYNC: ::libc::c_uint = 2;
pub const FDB_DRB_ODIRECT_ASYNC: ::libc::c_uint = 3;
pub type fdb_compaction_mode_t = u8;
pub type Enum_Unnamed6 = ::libc::c_uint;
pub const FDB_COMPACTION_MANUAL: ::libc::c_uint = 0;
pub const FDB_COMPACTION_AUTO: ::libc::c_uint = 1;
pub type fdb_isolation_level_t = u8;
pub type Enum_Unnamed7 = ::libc::c_uint;
pub const FDB_ISOLATION_READ_COMMITTED: ::libc::c_uint = 2;
pub const FDB_ISOLATION_READ_UNCOMMITTED: ::libc::c_uint = 3;
pub type fdb_custom_cmp_fixed =
    ::std::option::Option<extern "C" fn
                              (a: *mut ::libc::c_void, b: *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type fdb_custom_cmp_variable =
    ::std::option::Option<extern "C" fn
                              (a: *mut ::libc::c_void, len_a: ::libc::size_t,
                               b: *mut ::libc::c_void, len_b: ::libc::size_t)
                              -> ::libc::c_int>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed8 {
    pub chunksize: u16,
    pub blocksize: u32,
    pub buffercache_size: u64,
    pub wal_threshold: u64,
    pub wal_flush_before_commit: u8,
    pub auto_commit: u8,
    pub purging_interval: u32,
    pub seqtree_opt: fdb_seqtree_opt_t,
    pub durability_opt: fdb_durability_opt_t,
    pub flags: fdb_open_flags,
    pub compaction_buf_maxsize: u32,
    pub cleanup_cache_onclose: u8,
    pub compress_document_body: u8,
    pub compaction_mode: fdb_compaction_mode_t,
    pub compaction_threshold: u8,
    pub compaction_minimum_filesize: u64,
    pub compactor_sleep_duration: u64,
    pub multi_kv_instances: u8,
    pub prefetch_duration: u64,
}
impl ::std::default::Default for Struct_Unnamed8 {
    fn default() -> Struct_Unnamed8 { unsafe { ::std::mem::zeroed() } }
}
pub type fdb_config = Struct_Unnamed8;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed9 {
    pub create_if_missing: u8,
    pub custom_cmp: fdb_custom_cmp_variable,
}
impl ::std::default::Default for Struct_Unnamed9 {
    fn default() -> Struct_Unnamed9 { unsafe { ::std::mem::zeroed() } }
}
pub type fdb_kvs_config = Struct_Unnamed9;
pub type fdb_seqnum_t = u64;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_fdb_doc_struct {
    pub keylen: ::libc::size_t,
    pub metalen: ::libc::size_t,
    pub bodylen: ::libc::size_t,
    pub size_ondisk: ::libc::size_t,
    pub key: *mut ::libc::c_void,
    pub seqnum: fdb_seqnum_t,
    pub offset: u64,
    pub meta: *mut ::libc::c_void,
    pub body: *mut ::libc::c_void,
    pub deleted: u8,
}
impl ::std::default::Default for Struct_fdb_doc_struct {
    fn default() -> Struct_fdb_doc_struct { unsafe { ::std::mem::zeroed() } }
}
pub type fdb_doc = Struct_fdb_doc_struct;
pub type fdb_log_callback =
    ::std::option::Option<extern "C" fn
                              (err_code: ::libc::c_int,
                               err_msg: *const ::libc::c_char,
                               ctx_data: *mut ::libc::c_void)>;
#[allow(missing_copy_implementations)]
pub enum Struct__fdb_file_handle { }
pub type fdb_file_handle = Struct__fdb_file_handle;
#[allow(missing_copy_implementations)]
pub enum Struct__fdb_kvs_handle { }
pub type fdb_kvs_handle = Struct__fdb_kvs_handle;
pub type fdb_iterator_opt_t = u16;
pub type Enum_Unnamed10 = ::libc::c_uint;
pub const FDB_ITR_NONE: u16 = 0;
pub const FDB_ITR_NO_DELETES: u16 = 2;
pub const FDB_ITR_SKIP_MIN_KEY: u16 = 4;
pub const FDB_ITR_SKIP_MAX_KEY: u16 = 8;
pub type fdb_iterator_seek_opt_t = u8;
pub type Enum_Unnamed11 = ::libc::c_uint;
pub const FDB_ITR_SEEK_HIGHER: u8 = 0;
pub const FDB_ITR_SEEK_LOWER: u8 = 1;
#[allow(missing_copy_implementations)]
pub enum Struct__fdb_iterator { }
pub type fdb_iterator = Struct__fdb_iterator;
pub type cs_off_t = i64;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed12 {
    pub filename: *const ::libc::c_char,
    pub new_filename: *const ::libc::c_char,
    pub doc_count: u64,
    pub space_used: u64,
    pub file_size: u64,
}
impl ::std::default::Default for Struct_Unnamed12 {
    fn default() -> Struct_Unnamed12 { unsafe { ::std::mem::zeroed() } }
}
pub type fdb_file_info = Struct_Unnamed12;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed13 {
    pub name: *const ::libc::c_char,
    pub last_seqnum: fdb_seqnum_t,
    pub doc_count: u64,
    pub space_used: u64,
    pub file: *mut fdb_file_handle,
}
impl ::std::default::Default for Struct_Unnamed13 {
    fn default() -> Struct_Unnamed13 { unsafe { ::std::mem::zeroed() } }
}
pub type fdb_kvs_info = Struct_Unnamed13;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed14 {
    pub num_kvs_names: ::libc::size_t,
    pub kvs_names: *mut *mut ::libc::c_char,
}
impl ::std::default::Default for Struct_Unnamed14 {
    fn default() -> Struct_Unnamed14 { unsafe { ::std::mem::zeroed() } }
}
pub type fdb_kvs_name_list = Struct_Unnamed14;
extern "C" {
    pub fn fdb_init(config: *mut fdb_config) -> fdb_status;
    pub fn fdb_get_default_config() -> fdb_config;
    pub fn fdb_get_default_kvs_config() -> fdb_kvs_config;
    pub fn fdb_open(ptr_fhandle: *mut *mut fdb_file_handle,
                    filename: *const ::libc::c_char, fconfig: *mut fdb_config)
     -> fdb_status;
    pub fn fdb_open_custom_cmp(ptr_fhandle: *mut *mut fdb_file_handle,
                               filename: *const ::libc::c_char,
                               fconfig: *mut fdb_config,
                               num_functions: ::libc::size_t,
                               kvs_names: *mut *mut ::libc::c_char,
                               functions: *mut fdb_custom_cmp_variable)
     -> fdb_status;
    pub fn fdb_set_log_callback(handle: *mut fdb_kvs_handle,
                                log_callback: fdb_log_callback,
                                ctx_data: *mut ::libc::c_void) -> fdb_status;
    pub fn fdb_doc_create(doc: *mut *mut fdb_doc, key: *const ::libc::c_void,
                          keylen: ::libc::size_t, meta: *const ::libc::c_void,
                          metalen: ::libc::size_t, body: *const ::libc::c_void,
                          bodylen: ::libc::size_t) -> fdb_status;
    pub fn fdb_doc_update(doc: *mut *mut fdb_doc, meta: *const ::libc::c_void,
                          metalen: ::libc::size_t, body: *const ::libc::c_void,
                          bodylen: ::libc::size_t) -> fdb_status;
    pub fn fdb_doc_free(doc: *mut fdb_doc) -> fdb_status;
    pub fn fdb_get(handle: *mut fdb_kvs_handle, doc: *mut fdb_doc)
     -> fdb_status;
    pub fn fdb_get_metaonly(handle: *mut fdb_kvs_handle, doc: *mut fdb_doc)
     -> fdb_status;
    pub fn fdb_get_byseq(handle: *mut fdb_kvs_handle, doc: *mut fdb_doc)
     -> fdb_status;
    pub fn fdb_get_metaonly_byseq(handle: *mut fdb_kvs_handle,
                                  doc: *mut fdb_doc) -> fdb_status;
    pub fn fdb_get_byoffset(handle: *mut fdb_kvs_handle, doc: *mut fdb_doc)
     -> fdb_status;
    pub fn fdb_set(handle: *mut fdb_kvs_handle, doc: *mut fdb_doc)
     -> fdb_status;
    pub fn fdb_del(handle: *mut fdb_kvs_handle, doc: *mut fdb_doc)
     -> fdb_status;
    pub fn fdb_get_kv(handle: *mut fdb_kvs_handle, key: *mut ::libc::c_void,
                      keylen: ::libc::size_t, value_out: *mut *mut ::libc::c_void,
                      valuelen_out: *mut ::libc::size_t) -> fdb_status;
    pub fn fdb_set_kv(handle: *mut fdb_kvs_handle, key: *mut ::libc::c_void,
                      keylen: ::libc::size_t, value: *mut ::libc::c_void,
                      valuelen: ::libc::size_t) -> fdb_status;
    pub fn fdb_del_kv(handle: *mut fdb_kvs_handle, key: *mut ::libc::c_void,
                      keylen: ::libc::size_t) -> fdb_status;
    pub fn fdb_commit(fhandle: *mut fdb_file_handle, opt: fdb_commit_opt_t)
     -> fdb_status;
    pub fn fdb_snapshot_open(handle_in: *mut fdb_kvs_handle,
                             handle_out: *mut *mut fdb_kvs_handle,
                             snapshot_seqnum: fdb_seqnum_t) -> fdb_status;
    pub fn fdb_rollback(handle_ptr: *mut *mut fdb_kvs_handle,
                        rollback_seqnum: fdb_seqnum_t) -> fdb_status;
    pub fn fdb_iterator_init(handle: *mut fdb_kvs_handle,
                             iterator: *mut *mut fdb_iterator,
                             min_key: *const ::libc::c_void,
                             min_keylen: ::libc::size_t,
                             max_key: *const ::libc::c_void,
                             max_keylen: ::libc::size_t, opt: fdb_iterator_opt_t)
     -> fdb_status;
    pub fn fdb_iterator_sequence_init(handle: *mut fdb_kvs_handle,
                                      iterator: *mut *mut fdb_iterator,
                                      min_seq: fdb_seqnum_t,
                                      max_seq: fdb_seqnum_t,
                                      opt: fdb_iterator_opt_t) -> fdb_status;
    pub fn fdb_iterator_prev(iterator: *mut fdb_iterator) -> fdb_status;
    pub fn fdb_iterator_next(iterator: *mut fdb_iterator) -> fdb_status;
    pub fn fdb_iterator_get(iterator: *mut fdb_iterator,
                            doc: *mut *mut fdb_doc) -> fdb_status;
    pub fn fdb_iterator_get_metaonly(iterator: *mut fdb_iterator,
                                     doc: *mut *mut fdb_doc) -> fdb_status;
    pub fn fdb_iterator_seek(iterator: *mut fdb_iterator,
                             seek_key: *const ::libc::c_void,
                             seek_keylen: ::libc::size_t,
                             direction: fdb_iterator_seek_opt_t)
     -> fdb_status;
    pub fn fdb_iterator_seek_to_min(iterator: *mut fdb_iterator)
     -> fdb_status;
    pub fn fdb_iterator_seek_to_max(iterator: *mut fdb_iterator)
     -> fdb_status;
    pub fn fdb_iterator_close(iterator: *mut fdb_iterator) -> fdb_status;
    pub fn fdb_compact(fhandle: *mut fdb_file_handle,
                       new_filename: *const ::libc::c_char) -> fdb_status;
    pub fn fdb_estimate_space_used(fhandle: *mut fdb_file_handle) ->::libc::size_t;
    pub fn fdb_get_file_info(fhandle: *mut fdb_file_handle,
                             info: *mut fdb_file_info) -> fdb_status;
    pub fn fdb_get_kvs_info(handle: *mut fdb_kvs_handle,
                            info: *mut fdb_kvs_info) -> fdb_status;
    pub fn fdb_get_kvs_seqnum(handle: *mut fdb_kvs_handle,
                              seqnum: *mut fdb_seqnum_t) -> fdb_status;
    pub fn fdb_get_kvs_name_list(fhandle: *mut fdb_file_handle,
                                 kvs_name_list: *mut fdb_kvs_name_list)
     -> fdb_status;
    pub fn fdb_free_kvs_name_list(kvs_name_list: *mut fdb_kvs_name_list)
     -> fdb_status;
    pub fn fdb_switch_compaction_mode(fhandle: *mut fdb_file_handle,
                                      mode: fdb_compaction_mode_t,
                                      new_threshold: ::libc::size_t) -> fdb_status;
    pub fn fdb_close(fhandle: *mut fdb_file_handle) -> fdb_status;
    pub fn fdb_destroy(filename: *const ::libc::c_char,
                       fconfig: *mut fdb_config) -> fdb_status;
    pub fn fdb_shutdown() -> fdb_status;
    pub fn fdb_begin_transaction(fhandle: *mut fdb_file_handle,
                                 isolation_level: fdb_isolation_level_t)
     -> fdb_status;
    pub fn fdb_end_transaction(fhandle: *mut fdb_file_handle,
                               opt: fdb_commit_opt_t) -> fdb_status;
    pub fn fdb_abort_transaction(fhandle: *mut fdb_file_handle) -> fdb_status;
    pub fn fdb_kvs_open(fhandle: *mut fdb_file_handle,
                        ptr_handle: *mut *mut fdb_kvs_handle,
                        kvs_name: *const ::libc::c_char,
                        config: *mut fdb_kvs_config) -> fdb_status;
    pub fn fdb_kvs_open_default(fhandle: *mut fdb_file_handle,
                                ptr_handle: *mut *mut fdb_kvs_handle,
                                config: *mut fdb_kvs_config) -> fdb_status;
    pub fn fdb_kvs_close(handle: *mut fdb_kvs_handle) -> fdb_status;
    pub fn fdb_kvs_remove(fhandle: *mut fdb_file_handle,
                          kvs_name: *const ::libc::c_char) -> fdb_status;
    pub fn fdb_error_msg(err_code: fdb_status) -> *const ::libc::c_char;
}
